// Rem output with px fallback
// Responsive breakpoints
$phone-portrait: 320px;
$phone-landscape: 480px;
$tablet-small: 600px;
$tablet-portrait: 768px;
$tablet-landscape: 1024px;
$laptop: 1200px;
$desktop: 1600px;
$desktop-large: 2200px;

@function get-value($n) {
    @return $n / ($n * 0 + 1)
}


@mixin font-size($sizeValue: 1) {
	font-size: ( get-value($sizeValue) / 16) + rem;
}

// Center block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Clearfix
@mixin clearfix() {
	content: "";
	display: table;
	table-layout: fixed;
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
	clear: both;
}

// Column width with margin
@mixin column-width($numberColumns: 3) {
	width: map-get( $columns, $numberColumns ) - ( ( $columns__margin * ( $numberColumns - 1 ) ) / $numberColumns );
}

@mixin responsive($media: null, $min-width: null, $max-width: null, $min-height: null, $max-height: null) {
    @if $media == 'phone-portrait' {
        @media (min-width: $phone-portrait) {
            @content;
        }
    }

    @if $media == 'phone-landscape' {
        @media (min-width: $phone-landscape) {
            @content;
        }
    }

    @if $media == 'tablet-small' {
        @media (min-width: $tablet-small) {
            @content;
        }
    }

    @if $media == 'tablet-portrait' {
        @media (min-width: $tablet-portrait) {
            @content;
        }
    }

    @if $media == 'tablet-landscape' {
        @media (min-width: $tablet-landscape) {
            @content;
        }
    }

    @if $media == 'laptop' {
        @media (min-width: $laptop) {
            @content;
        }
    }

    @if $media == 'desktop' {
        @media (min-width: $desktop) {
            @content;
        }
    }

    @if $media == 'desktop-large' {
        @media (min-width: $desktop-large) {
            @content;
        }
    }

    @if not $media {
        @if $min-width and $max-width {
            @media (min-width: $min-width) and (max-width: $max-width) {
                @content;
            }
        } @else if $min-width {
            @media (min-width: $min-width) {
                @content;
            }
        } @else if $max-width {
            @media (max-width: $max-width) {
                @content;
            }
        }
    }

    @if not $media {
        @if $min-height and $max-height {
            @media (min-height: $min-height) and (max-height: $max-height) {
                @content;
            }
        } @else if $min-height {
            @media (min-height: $min-height) {
                @content;
            }
        } @else if $max-height {
            @media (max-height: $max-height) {
                @content;
            }
        }
    }
}

@mixin absolute-middle-aligment($type) {

    @if ($type == 'vertical') {
        top: 50%;
        transform: translateY(-50%);
    }
    @else if ($type == 'horizontal') {
        left: 50%;
        transform: translateX(-50%);
    }
    @else if ($type == 'both') {
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
    }
}

@mixin blurred-background($color: white, $opacity: .8, $blur: null) {

    &:before {
        content: "";
        display: block;
        width: 100%;
        height: 100%;
        position: absolute;
        top: 0;
        right: 0;
        background: $color;
        opacity: $opacity;
        z-index: -1;

        @if ($blur != null) {
            filter: blur($blur);
        }
    }
}
